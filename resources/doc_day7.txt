--- Day 7: Some Assembly Required ---

This year, Santa brought little Bobby Tables a set of wires and bitwise logic gates! Unfortunately, little Bobby is a little under the recommended age range, and he needs help assembling the circuit.

Each wire has an identifier (some lowercase letters) and can carry a 16-bit signal (a number from 0 to 65535). A signal is provided to each wire by a gate, another wire, or some specific value. Each wire can only get a signal from one source, but can provide its signal to multiple destinations. A gate provides no signal until all of its inputs have a signal.

The included instructions booklet describes how to connect the parts together: x AND y -> z means to connect wires x and y to an AND gate, and then connect its output to wire z.

For example:

    123 -> x means that the signal 123 is provided to wire x.
    x AND y -> z means that the bitwise AND of wire x and wire y is provided to wire z.
    p LSHIFT 2 -> q means that the value from wire p is left-shifted by 2 and then provided to wire q.
    NOT e -> f means that the bitwise complement of the value from wire e is provided to wire f.

Other possible gates include OR (bitwise OR) and RSHIFT (right-shift). If, for some reason, you'd like to emulate the circuit instead, almost all programming languages (for example, C, JavaScript, or Python) provide operators for these gates.

For example, here is a simple circuit:

123 -> x
456 -> y
x AND y -> d
x OR y -> e
x LSHIFT 2 -> f
y RSHIFT 2 -> g
NOT x -> h
NOT y -> i

After it is run, these are the signals on the wires:

d: 72
e: 507
f: 492
g: 114
h: 65412
i: 65079
x: 123
y: 456

In little Bobby's kit's instructions booklet (provided as your puzzle input), what signal is ultimately provided to wire a?

String texte =  "Quand le ciel bas et lourd" ;  // texte Ã  tester    
 boolean b = Pattern.matches("a.*", texte) ;
 
 
 ublic static int wordCounter() throws FileNotFoundException { 
//inputs the text file
Scanner input = new Scanner(new File("words.txt")); 
    int countWords = 0;
    //while there are more lines
    while (input.hasNextLine()) {
        //goes to each next word
        String word = input.next();
        //counts each word
        countWords++;
    }
    return countWords;
}


s.trim().split("\\s+").length

			
				scanner = new Scanner(line);
				scanner.useDelimiter(splitBy);
				String first = scanner.next();
				
				if ( isNumeric(first)) {
					// valeur numerique ==> entry1 value
					wire.setEntry1value(Integer.parseInt(first));
					//
				}else{
					// Majuscule ==> operation
					
					if (Pattern.matches("[A-Z]*", first) ) {
						// en majuscule OPERATION
						System.out.println ("majuscule " + first ) ;
						wire.setOperation(first);
					} else {
					
					wire.setEntry1(first);
					}
				}
				scanner.close();
				
				System.out.println( first ) ;
				
	
	// 0 pour affectation , 1 pour unaire , 2 binaire 
	
	System.out.println( " lg " + lg) ;
					System.out.println( " ~lg " + ~lg) ;
					System.out.println( " ~lg & 0xffffffff " + ( ~lg & 0xffffffff ) ) ;
					System.out.println( " ~lg & 0xffff " + ( ~lg & 0xffff ) ) ;
					
					
&& wire.getEntry1Done()
(78) a  = lx  : 2797  : true  : null  : 0  : false  : null  : 0  : true  : 2797  : 
					